{"ast":null,"code":"import _classCallCheck from\"/home/toufiq/go/src/github.com/play-around/presenter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import io from'socket.io-client';var PORT_WS=4001;var client=null;// Make sure to always keep the callback as the last argument\nvar Client=function Client(url){var _this=this;_classCallCheck(this,Client);this.socket=io(url);this.isConnected=function(){return _this.socket.connected;};this.onConnect=function(cb){return _this.socket.on('connect',cb);};this.onReconnect=function(cb){return _this.socket.on('reconnect',cb);};this.onConnectError=function(cb){return _this.socket.on('connect_error',cb);};this.disconnect=function(){return _this.socket.disconnect();};this.onError=function(cb){return _this.socket.on('error',cb);};this.getCurrentSlide=function(cb){return _this.socket.emit('get-current-slide',cb);};this.setCurrentSlide=function(index,cb){return _this.socket.emit('set-current-slide',index,cb);};this.getSlides=function(cb){return _this.socket.emit('get-slides',cb);};this.login=function(password,cb){return _this.socket.emit('login',password,cb);};this.onSlideIndex=function(cb){return _this.socket.on('slide-index',cb);};};export var getClient=function getClient(){if(!client){client=new Client(\"\".concat(window.location.hostname,\":\").concat(PORT_WS));}return client;};export default getClient();","map":{"version":3,"sources":["/home/toufiq/go/src/github.com/play-around/presenter/src/client.js"],"names":["io","PORT_WS","client","Client","url","socket","isConnected","connected","onConnect","cb","on","onReconnect","onConnectError","disconnect","onError","getCurrentSlide","emit","setCurrentSlide","index","getSlides","login","password","onSlideIndex","getClient","window","location","hostname"],"mappings":"yIAAA,MAAOA,CAAAA,EAAP,KAAe,kBAAf,CAEA,GAAMC,CAAAA,OAAO,CAAG,IAAhB,CACA,GAAIC,CAAAA,MAAM,CAAG,IAAb,CAEA;GACMC,CAAAA,M,CACF,gBAAYC,GAAZ,CAAiB,6CACb,KAAKC,MAAL,CAAcL,EAAE,CAACI,GAAD,CAAhB,CAEA,KAAKE,WAAL,CAAmB,iBAAM,CAAA,KAAI,CAACD,MAAL,CAAYE,SAAlB,EAAnB,CACA,KAAKC,SAAL,CAAiB,SAAAC,EAAE,QAAI,CAAA,KAAI,CAACJ,MAAL,CAAYK,EAAZ,CAAe,SAAf,CAA0BD,EAA1B,CAAJ,EAAnB,CACA,KAAKE,WAAL,CAAmB,SAAAF,EAAE,QAAI,CAAA,KAAI,CAACJ,MAAL,CAAYK,EAAZ,CAAe,WAAf,CAA4BD,EAA5B,CAAJ,EAArB,CACA,KAAKG,cAAL,CAAsB,SAAAH,EAAE,QAAI,CAAA,KAAI,CAACJ,MAAL,CAAYK,EAAZ,CAAe,eAAf,CAAgCD,EAAhC,CAAJ,EAAxB,CACA,KAAKI,UAAL,CAAkB,iBAAM,CAAA,KAAI,CAACR,MAAL,CAAYQ,UAAZ,EAAN,EAAlB,CACA,KAAKC,OAAL,CAAe,SAAAL,EAAE,QAAI,CAAA,KAAI,CAACJ,MAAL,CAAYK,EAAZ,CAAe,OAAf,CAAwBD,EAAxB,CAAJ,EAAjB,CAEA,KAAKM,eAAL,CAAuB,SAAAN,EAAE,QAAI,CAAA,KAAI,CAACJ,MAAL,CAAYW,IAAZ,CAAiB,mBAAjB,CAAsCP,EAAtC,CAAJ,EAAzB,CACA,KAAKQ,eAAL,CAAuB,SAACC,KAAD,CAAQT,EAAR,QAAe,CAAA,KAAI,CAACJ,MAAL,CAAYW,IAAZ,CAAiB,mBAAjB,CAAsCE,KAAtC,CAA6CT,EAA7C,CAAf,EAAvB,CACA,KAAKU,SAAL,CAAiB,SAAAV,EAAE,QAAI,CAAA,KAAI,CAACJ,MAAL,CAAYW,IAAZ,CAAiB,YAAjB,CAA+BP,EAA/B,CAAJ,EAAnB,CACA,KAAKW,KAAL,CAAa,SAACC,QAAD,CAAWZ,EAAX,QAAkB,CAAA,KAAI,CAACJ,MAAL,CAAYW,IAAZ,CAAiB,OAAjB,CAA0BK,QAA1B,CAAoCZ,EAApC,CAAlB,EAAb,CACA,KAAKa,YAAL,CAAoB,SAAAb,EAAE,QAAI,CAAA,KAAI,CAACJ,MAAL,CAAYK,EAAZ,CAAe,aAAf,CAA8BD,EAA9B,CAAJ,EAAtB,CACH,C,CAGL,MAAO,IAAMc,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC3B,GAAI,CAACrB,MAAL,CAAa,CACTA,MAAM,CAAG,GAAIC,CAAAA,MAAJ,WAAcqB,MAAM,CAACC,QAAP,CAAgBC,QAA9B,aAA0CzB,OAA1C,EAAT,CACH,CACD,MAAOC,CAAAA,MAAP,CACH,CALM,CAMP,cAAeqB,CAAAA,SAAS,EAAxB","sourcesContent":["import io from 'socket.io-client'\n\nconst PORT_WS = 4001\nlet client = null\n\n// Make sure to always keep the callback as the last argument\nclass Client {\n    constructor(url) {\n        this.socket = io(url)\n\n        this.isConnected = () => this.socket.connected\n        this.onConnect = cb => this.socket.on('connect', cb)\n        this.onReconnect = cb => this.socket.on('reconnect', cb)\n        this.onConnectError = cb => this.socket.on('connect_error', cb);\n        this.disconnect = () => this.socket.disconnect()\n        this.onError = cb => this.socket.on('error', cb)\n\n        this.getCurrentSlide = cb => this.socket.emit('get-current-slide', cb)\n        this.setCurrentSlide = (index, cb) => this.socket.emit('set-current-slide', index, cb)\n        this.getSlides = cb => this.socket.emit('get-slides', cb)\n        this.login = (password, cb) => this.socket.emit('login', password, cb)\n        this.onSlideIndex = cb => this.socket.on('slide-index', cb)\n    }\n\n}\nexport const getClient = () => {\n    if (!client) {\n        client = new Client(`${window.location.hostname}:${PORT_WS}`)\n    }\n    return client\n}\nexport default getClient()"]},"metadata":{},"sourceType":"module"}