{"version":3,"sources":["client.js","App.js","serviceWorker.js","index.js"],"names":["client","getClient","url","this","socket","io","isConnected","connected","onConnect","cb","on","onReconnect","onConnectError","disconnect","onError","getCurrentSlide","emit","setCurrentSlide","index","getSlides","login","password","onSlideIndex","window","location","hostname","App","useState","localStorage","getItem","setPassword","slideIndex","setSlideIndexOrg","slides","setSlides","isPresenter","setIsPresenter","DO_PRESENT","name","params","href","replace","_","key","value","getUrlParam","toLowerCase","setSlideIndex","handleLogin","callback","delay","thisArg","timeoutId","args","arguments","clearTimeout","setTimeout","apply","deferred","admin","numSlides","length","document","onkeydown","e","event","keyCode","err","console","log","setItem","useEffect","style","styles","counter","imgContainer","map","slide","src","display","width","alt","textAlign","onSubmit","preventDefault","type","onChange","target","placeholder","input","button","onClick","background","cursor","fontWeight","padding","position","top","left","color","height","overflow","borderRadius","border","Boolean","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48cb3a07.chunk.js","sourcesContent":["import io from 'socket.io-client'\n\nconst PORT_WS = 4001\nlet client = null\n\n// Make sure to always keep the callback as the last argument\nclass Client {\n    constructor(url) {\n        this.socket = io(url)\n\n        this.isConnected = () => this.socket.connected\n        this.onConnect = cb => this.socket.on('connect', cb)\n        this.onReconnect = cb => this.socket.on('reconnect', cb)\n        this.onConnectError = cb => this.socket.on('connect_error', cb);\n        this.disconnect = () => this.socket.disconnect()\n        this.onError = cb => this.socket.on('error', cb)\n\n        this.getCurrentSlide = cb => this.socket.emit('get-current-slide', cb)\n        this.setCurrentSlide = (index, cb) => this.socket.emit('set-current-slide', index, cb)\n        this.getSlides = cb => this.socket.emit('get-slides', cb)\n        this.login = (password, cb) => this.socket.emit('login', password, cb)\n        this.onSlideIndex = cb => this.socket.on('slide-index', cb)\n    }\n\n}\nexport const getClient = () => {\n    if (!client) {\n        client = new Client(`${window.location.hostname}:${PORT_WS}`)\n    }\n    return client\n}\nexport default getClient()","import React, { useState, useEffect } from 'react'\nimport client from './client'\nimport './App.css'\n\nexport default function App() {\n\tconst [password, setPassword] = useState(localStorage.getItem('password'))\n\tconst [slideIndex, setSlideIndexOrg] = useState(0)\n\tconst [slides, setSlides] = useState([]) // slide names\n\tconst [isPresenter, setIsPresenter] = useState(false)\n\tconst DO_PRESENT = getUrlParam('present').toLowerCase() === 'yes'\n\tconst setSlideIndex = index => {\n\t\twindow.slideIndex = index\n\t\tsetSlideIndexOrg(index)\n\t}\n\tconst handleLogin = deferred(() => {\n\t\tclient.login(password, (_, admin, slides, index) => {\n\t\t\tif (password) {\n\t\t\t\tsetIsPresenter(admin)\n\t\t\t\tadmin && setupKeyHandler(slides.length)\n\t\t\t\t// clear password if incorrect\n\t\t\t\tlocalStorage.setItem('password', admin ? password : '')\n\t\t\t\t!admin && setPassword(password)\n\t\t\t}\n\t\t\tsetSlides(slides || [])\n\t\t\tsetSlideIndex(index)\n\t\t})\n\t}, 100)\n\n\tuseEffect(() => {\n\t\thandleLogin()\n\t\tclient.onSlideIndex((index) => {\n\t\t\tsetSlideIndex(index)\n\t\t\tconsole.log('Slide changed', index)\n\t\t})\n\n\t\tclient.onReconnect(() => {\n\t\t\tslides.length === 0 && client.getSlides(slides => setSlides(slides || []))\n\t\t\tisPresenter && password && handleLogin()\n\t\t})\n\t\treturn () => { }\n\t}, [])\n\n\tif (DO_PRESENT && !isPresenter && !localStorage.getItem('password')) return (\n\t\t<div style={{ textAlign: 'center' }}>\n\t\t\t<h3>Please enter password to login</h3>\n\t\t\t<form onSubmit={e => e.preventDefault() | handleLogin()}>\n\t\t\t\t<input\n\t\t\t\t\ttype='password'\n\t\t\t\t\tonChange={e => setPassword(e.target.value)}\n\t\t\t\t\tplaceholder='Enter password'\n\t\t\t\t\tstyle={styles.input}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tstyle={styles.button}\n\t\t\t\t\tonClick={e => e.preventDefault() | handleLogin()}\n\t\t\t\t>\n\t\t\t\t\tLogin as presenter\n\t\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tstyle={styles.button}\n\t\t\t\t\tonClick={() => window.location.href = '?present=no'}\n\t\t\t\t>\n\t\t\t\t\tView Only\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t<div>\n\t\t\t</div>\n\t\t</div>\n\t)\n\treturn (\n\t\t<div>\n\t\t\t<div style={styles.counter}>\n\t\t\t\t{slideIndex + 1}/{slides.length}\n\t\t\t</div>\n\t\t\t<div style={styles.imgContainer}>\n\t\t\t\t{slides.map((slide, index) => (\n\t\t\t\t\t<img {...{\n\t\t\t\t\t\tsrc: `./slides/${slide}`,\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tdisplay: slideIndex !== index ? 'none' : 'block',\n\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t},\n\t\t\t\t\t\talt: slide,\n\t\t\t\t\t}} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nconst styles = {\n\tbutton: {\n\t\tbackground: '#dadada',\n\t\tcursor: 'pointer',\n\t\tfontWeight: 'bold',\n\t\tpadding: '10px 15px',\n\t},\n\tcounter: {\n\t\tposition: 'fixed',\n\t\ttop: 25,\n\t\tleft: 25,\n\t\tfontWeight: 'bold',\n\t\tcolor: 'grey',\n\t},\n\timgContainer: {\n\t\theight: '100%',\n\t\twidth: '100%',\n\t\toverflow: 'hidden',\n\t},\n\tinput: {\n\t\tpadding: '10px 15px',\n\t\tborderRadius: 3,\n\t\tborder: '1px solid grey'\n\t},\n}\n\n// getUrlParam reads the URL parameters\n//\n// Params:\n// @name    string: (optional) if supplied will return a specific paramenter as string.\n//                  Otherwise, will return an object containing all the URL parameters with respective values.\n//\n// returns  string/object\nfunction getUrlParam(name) {\n\tconst params = {}\n\tconst regex = /[?&]+([^=&]+)=([^&]*)/gi\n\twindow.location.href.replace(regex, (_, key, value) => params[key] = value)\n\treturn name ? params[name] || '' : params\n}\n\n// deferred returns a function that invokes the callback function after certain delay/timeout\n// If the returned function is invoked again before timeout,\n// the invokation will be deferred further with the duration supplied in @delay\n//\n// Params:\n// @callback  function  : function to be invoked after deferred delay\n// @delay     number    : number of milliseconds to be delayed.\n//                        Default value: 50\n// @thisArg    object   : optional, makes sure callback is bounded to supplied object \nexport function deferred(callback, delay, thisArg) {\n\tlet timeoutId\n\treturn function () {\n\t\tconst args = arguments\n\t\tif (timeoutId) clearTimeout(timeoutId)\n\t\ttimeoutId = setTimeout(function () {\n\t\t\tcallback && callback.apply(thisArg, args)\n\t\t}, delay || 50)\n\t}\n}\n\nfunction setupKeyHandler(numSlides) {\n\tdocument.onkeydown = e => {\n\t\t// control slide on arrow key press and page up/down key press\n\t\te = e || window.event;\n\t\tlet index = window.slideIndex\n\t\tswitch (e.keyCode) {\n\t\t\tcase 35: // End key\n\t\t\t\tindex = numSlides - 1 // go to last slide\n\t\t\t\tbreak\n\t\t\tcase 36: // Home key\n\t\t\t\tindex = 0 // go to first slide\n\t\t\t\tbreak\n\t\t\tcase 38: // up arrow\n\t\t\tcase 37: // left arrow\n\t\t\t\tindex-- // go to previous slide\n\t\t\t\tbreak\n\t\t\tcase 39: // right arrow\n\t\t\tcase 40: // down arrow\n\t\t\t\tindex++ // go to next slide\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\t// console.log({ keyCode: e.keyCode })\n\t\t\t\tbreak\n\t\t}\n\t\tif (index < 0 || index >= numSlides) return\n\t\tclient.setCurrentSlide(index, err => err && console.log('setCurrentSlide', { err }))\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}